/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.estudos.collections;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;


public class Lists {
    public static void main(String[] args) {
        // Coleções com iterações ordenadas: Listas
        /*
         * Listas estão no pacotte Java.util.List
         *  - Elementos duplicados e garante ordem de inserção
         */
        // Principais formas de inicializar uma lista
        // List notas = new ArrayList(); // antes do java 5
        // List<Double> notas = new ArrayList<Double>(); // Generics(JDK 5) - DIamond operator(JDK 7)
        // List<Double> notas = new ArrayList<>(); 
        // List<Double> notas = new ArrayList<>(Arrays.asList(7d, 8.5, 9.3, 5d, 7d, 0d, 3.6));
        // List<Double> notas = Arrays.asList(7d, 8.5, 9.3, 5d, 7d, 0d, 3.6);
        // notas.add(10d); // Com essa forma não consigo mais adicionar elemetnos na lista
        // System.out.println(notas);
        // List<Double> notas = List.of(7d, 8.5, 9.3, 5d, 7d, 0d, 3.6); // Dessa forma torna a lista imutavel
        // notas.add(1d);
        // notas.remove(5d);
        // System.out.println(notas);

        // Execicio

        // Criar uma lista e adicionando 7 notas
        List<Double> notas = new ArrayList<Double>();
        notas.add(7d); // O metodo add adiciona um elemento no final da lista
        notas.add(8.5);
        notas.add(9.3);
        notas.add(5d);
        notas.add(7d);
        notas.add(0d);
        notas.add(3.6);

        // Exiba a posicão da nota 5
        // O metodo .indexOf() retorna a posição de um elemento
        System.out.println(notas.indexOf(5d));

        // Adicione na lista a nota 8.0 na posição 4
        // com o metodo add pode passar dois parâmetros o primeiro sendo o indice e o segundo o elemento para ser adicionado
        // Fazendo isoo não irá substituir o elemento da posição, mas vai "empurrar" os elementos restantes 1 posição
        notas.add(4, 8d);
        System.out.println(notas);

        // Substitua a nota 5.0 pela nota 6.0
        // Método .set() recebe como parâmetros a posição e um elemento, irá substituir o elemento da posição pelo novo elemento
        notas.set(notas.indexOf(5d), 6d);
        System.out.println(notas);

        // Confira se a nota 5.0 está na lista
        // método .contains() recebe um valor verifica se o valor existe na lista e retorna um boolean
        System.out.println(notas.contains(5d));

        // Exiba todas as ntoas na ordem em que foram informada
        for (Double nota : notas) // foreach em java
            System.out.println(nota);

        // Exiba a terceira nota adicionada
        // Método .get() recebe como parâmetro uma posição e retorna o elemento da posição
        System.out.println("Terceira nota: " + notas.get(2));

        // Exiba o menor valor
        // método Collections.min() recebe uma collection e retorna o menor valor contido nela
        System.out.println("Menor nota: " + Collections.min(notas));

        // Exiba a maior nota
        // Collections.max() funciona semelhante com min, mas retorna a maior nota
        System.out.println("Maior nota: " + Collections.max(notas));
        
        // Exiba a soma dos valores
        // TODO: Estudar conceitos de iterator
        Iterator<Double> iterator = notas.iterator();
        Double soma = 0d;
        while(iterator.hasNext())
            soma += iterator.next();
        System.out.println("A soma das notas: " + soma);

        // Exiba a média das notas
        // O método .size() retorna o tamanho da coleção
        System.out.println("A média: " + (soma/notas.size()));

        // Remova a nota 0
        // O método .remove() pode receber tanto a posição qunto o objeto
        // notas.remove(0d);
        notas.remove(notas.indexOf(0d));

        // Remova ntoas menores que 7 e exiba a lista
        Iterator<Double> iterator1 = notas.iterator();
        while(iterator1.hasNext()) {
            Double next = iterator1.next();
            if (next < 7) iterator1.remove();
        }
        System.out.println(notas);

        // Apague toda a lista
        // O método .clear() apaga todos os elemetnos de uma lista
        notas.clear();

        // Confira se a lsita está vazia
        // o método .isEmpty() retorna um boolean respondendo se a lista está viazia ou não
        System.out.println(notas.isEmpty());

    }
}
